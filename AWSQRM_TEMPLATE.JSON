Notepad++ 7.5.1 new featurs/enhancements & bug-fixes:

1.  Fix some excluded language cannot be remembered bug.
2.  Fix a localization regression bug.
3.  Fix the bug that Notepad++ create "%APPDATA%\local\notepad++" folder in local conf mode.
4.  Add Visual Prolog language support.
5.  Add auto-completion support for batch file (*.bat).
6.  Enhance Function List for PHP and JavaScript.
7.  Enhance Shortcut Mapper by adding category column.
8.  Make double click work for language menu disabling/enabling in preferences dialog.
9.  Make double click work to improve file extension movement in Preferences dialog.
10. Fix bug: language menu item is restored back on the wrong zone.
11. Add a spiritual quote.



Included plugins:

1.  NppExport v0.2.8 (32-bit x86 only)
2.  Converter 4.2.1
3.  Mime Tool 2.1


Updater (Installer only):

* WinGup v4.1


{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Metadata": 
  {
    "AWS::CloudFormation::Interface" : 
    {
    	"ParameterGroups" : 
      [ 
        {
    	    "Label" : { "default" : "QRM VPC Configuration" },
      		"Parameters" : [ "QRMCidrBlock", "QRMEnvironmentType", 
                           "QRMAvailabilityZoneIndex", "QRMSecurityGroup"]
        },
        {
          "Label" : { "default" : "QRM Server Configuration" },
          "Parameters" : 
          [ 
            "DataInstanceType",
            "HeadInstanceType", 
            "InterfaceInstanceType1",
            "InterfaceInstanceType2",
            "ComputeInstanceType", "ComputeInstanceCount",  
            "DomainInstanceType","DomainInstanceIP",    
            "QRMKeyName"
          ]
        },
        {
          "Label" : { "default" : "QRM Windows Configuration" },
          "Parameters" : [ "DomainAdminUser", "DomainDNSName", "DomainNetBiosName", "AdminPassword"]
        }
      ],
    	"ParameterLabels" : 
      {
        "QRMCidrBlock" : {"default" : "What is the VPC Cidr Block?"},
        "QRMEnvironmentType" : {"default" : "What is the QRM platform type?"},
        "QRMAvailabilityZoneIndex"  : {"default" : "What is platform availability zone letter?"},		
        "QRMSecurityGroup"  : {"default" : "Select SecurityGroup"},
        "DataInstanceType"  : {"default" : "What is the Data node instance type?"}, 
        "HeadInstanceType" : {"default" : "What is the Head node instance type?"}, 
        "InterfaceInstanceType1" : {"default" : "What is the first Interface node instance type?"},
        "InterfaceInstanceType2" : {"default" : "What is the second Interface node instance type?"},
        "DomainInstanceType" : {"default" : "What is the Domain Controller node instance type?"}, 
        "ComputeInstanceType" : {"default" : "What Compute node instance type?"}, 
        "ComputeInstanceCount" : {"default" : "Number of Compute node instances?"}, 
        "AdminPassword" : {"default" : "What is the server administrative password?"}, 
        "QRMKeyName" :  {"default" : "What Key pair?"},
        "DomainAdminUser" :  {"default" : "What is the user name for the domain administrator account?"},
        "DomainDNSName" :  {"default" : "What is the fully qualified domain name of the root forest domain?"},
        "DomainNetBiosName" :  {"default" : "What is the Netbios domain name?"}
    	}
    }
  },

  "Parameters" : 
  {
    "QRMEnvironmentType" : 
    {
      "Description"   :   "QRM Dev, test, or Prod Platform",
      "Type"          :   "String",
      "AllowedValues" :  ["Dev", "Test", "Prod"],
      "Default" : "Dev",
      "ConstraintDescription" : "must be either Dev, test, or Prod"
    },
    "QRMAvailabilityZoneIndex" :
    {
      "Description"   :   "QRM Platform AZ letter A,B, or C for Dev, Test, or Prod",
      "Type"          :   "String",
      "AllowedValues" :  ["A", "B", "C"],
      "Default" : "A",
      "ConstraintDescription" : "Must be a letter of the AZ in the specified DRegion"
    },
    "QRMCidrBlock"	: 
    {
    	"Description"	: 	"VPC Cidr Block",
    	"Type"			:	"String",
    	"MinLength"	:	"9",
    	"MaxLength"	: "18",
    	"AllowedPattern" : "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "AllowedValues" : ["10.0.0.0"],
    	"Default"		:	"10.0.0.0"
    },
    "QRMKeyName"   :   
    {
      "Description"   :   "Name of Existing EC2 KeyPair",
      "Type"          :   "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription"    :   "must be the name of an existing Ec2 pair"
    },
    "DataInstanceType"  :      
    {
      "Description"   :   "Data node Instance Type",
      "Type"          :   "String",
      "Default"       :   "t2.micro",
      "AllowedValues" :   ["t2.micro"]
    },
    "HeadInstanceType"  :      
    {
      "Description"   :   "Head node Instance Type",
      "Type"          :   "String",
      "Default"       :   "t2.micro",
      "AllowedValues" :   ["t2.micro"]
    },
    "InterfaceInstanceType1"  :      
    {
      "Description"   :   "First Interface node Instance Type",
      "Type"          :   "String",
      "Default"       :   "t2.micro",
      "AllowedValues" :   ["t2.micro"]
    },
    "InterfaceInstanceType2"  :      
    {
      "Description"   :   "Second Interface node Instance Type",
      "Type"          :   "String",
      "Default"       :   "t2.micro",
      "AllowedValues" :   ["t2.micro"]
    },
    "ComputeInstanceType"  :      
    {
      "Description"   :   "Compute node Instance Type",
      "Type"          :   "String",
      "Default"       :   "t2.micro",
      "AllowedValues" :   ["t2.micro"]
    },
    "ComputeInstanceCount"  :
    {
      "Description" :   "Number of Compute nodes",
      "Type"      : "String",
      "MinLength" : "1",
      "MaxLength" : "3",
      "AllowedPattern" : "^[0-9]+$",
      "AllowedValues" : ["0","1","2","4","10","20"],
      "Default"   : "1"
    },
    "DomainInstanceType"  :      
    {
      "Description"   :   "Domain Controller node Instance Type",
      "Type"          :   "String",
      "Default"       :   "m4.large",
      "AllowedValues" :   ["m4.large"]
    },
    "AdminPassword" :
    {
      "Type": "String",
      "Description": "Server local administrator password"
    },
    "DomainAdminUser": 
    {
      "Description": "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
      "Type": "String",
      "Default": "QRMAdmin"
    },
    "DomainDNSName": 
    {
      "Description": "Fully qualified domain name (FQDN) of the forest root domain",
      "Type": "String",
      "Default": "Domain.com"
    },
    "DomainNetBiosName": 
    {
      "Description": "Netbios name for the domain",
      "Type": "String",
      "MaxLength" : "15",
      "Default": "DOMAIN"
    }

  },
  
  "Mappings"  : 
  {
    "RegionDataInstanceMap"  :   
    {
      "us-west-2" : {"Dev" : "ami-3dcbd744", "Test" : "ami-3dcbd744", "Prod" : "ami-3dcbd744"},
      "us-east-2" : { "Dev" : "ami-ceaa8bab", "Test" : "ami-ceaa8bab", "Prod" : "ami-ceaa8bab"} 
    },
    "RegionHeadInstanceMap"  :   
    {
      "us-west-2" : {"Dev" : "ami-3dcbd744", "Test" : "ami-3dcbd744", "Prod" : "ami-3dcbd744"},
      "us-east-2" : { "Dev" : "ami-ceaa8bab", "Test" : "ami-ceaa8bab", "Prod" : "ami-ceaa8bab"}
    },
    "RegionInterfaceInstanceMap"  :   
    {
      "us-west-2" : {"Dev" : "ami-3dcbd744", "Test" : "ami-3dcbd744", "Prod" : "ami-3dcbd744"},
      "us-east-2" : { "Dev" : "ami-ceaa8bab", "Test" : "ami-ceaa8bab", "Prod" : "ami-ceaa8bab"}
    },
    "RegionComputeInstanceMap"  :   
    {
      "us-west-2" : {"Dev" : "ami-3dcbd744", "Test" : "ami-3dcbd744", "Prod" : "ami-3dcbd744"},
      "us-east-2" : { "Dev" : "ami-ceaa8bab", "Test" : "ami-ceaa8bab", "Prod" : "ami-ceaa8bab"}
    },
    "RegionDomainControllerInstanceMap"  :   
    {
      "us-west-2" : {"Dev" : "ami-3dcbd744", "Test" : "ami-3dcbd744", "Prod" : "ami-3dcbd744"},
      "us-east-2" : { "Dev" : "ami-ceaa8bab", "Test" : "ami-ceaa8bab", "Prod" : "ami-ceaa8bab"}
    },
    "EnvironmentTypeName" :
    {
      "PlatformName" : {"Dev" : "D", "Test" : "T", "Prod" : "P"}
    },
    "SubnetMap" :
    {
      "A" : {"Dev" : "10..0.0.0", "Test" : "10..0.0.0", "Prod" : "10..0.0.0"},
      "B" : {"Dev" : "10..0.0.0", "Test" : "10..0.0.0", "Prod" : "10..0.0.0"},
      "C" : {"Dev" : "10..0.0.0", "Test" : "10..0.0.0", "Prod" : "10..0.0.0"}
    },
    "AZMap" :
    {
      "us-west-2" : {"A"  : "us-west-2a", "B" : "us-west-2b", "C" : "us-west-2c"},
      "us-east-2" : {"A"  : "us-east-2a", "B" : "us-east-2b", "C" : "us-east-2c"}
    },

    "DataNodePrivateIPMap" :
    {
      "Dev"  : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Test" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Prod" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"}
    },
    "HeadNodePrivateIPMap" :
    {
      "Dev"  : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Test" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Prod" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"}
    },
    "InterfaceNode1PrivateIPMap" :
    {
      "Dev"  : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Test" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Prod" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"}
    },
    "InterfaceNode2PrivateIPMap" :
    {
      "Dev"  : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Test" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Prod" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"}
    },
    "DomainNodePrivateIPMap" :
    {
      "Dev"  : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Test" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"},
      "Prod" : {"A" : "10..0.0.0", "B" : "10..0.0.0", "C" : "10..0.0.0"}
    }
  },

  "Resources"	: 
  {
    "QRMVPC" : 
    {
      "Type" : "AWS::EC2::VPC",
      "Properties" : 
      {
        "CidrBlock" : { "Ref"  : "QRMCidrBlock"},
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "InstanceTenancy" : "default",
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "QRM VPC ", {"Ref" : "QRMEnvironmentType"}," ",{"Ref": "QRMAvailabilityZoneIndex"}]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ]
      }
    },

    "QRMInternalRouteTable" : 
    {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn" : "QRMVPC",
      "Properties" : 
      {
        "VpcId" :{ "Ref"  : "QRMVPC"},
        "Tags" :
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "QRM Internal Route Table ", {"Ref" : "QRMEnvironmentType"}," ",{"Ref": "QRMAvailabilityZoneIndex"}]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ]
      }
    },

    "QRMSubNet" : 
    {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "QRMVPC",
      "Properties" : 
      {
        "AvailabilityZone" : { "Fn::FindInMap" : [ "AZMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMAvailabilityZoneIndex"} ]},
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]},
        "MapPublicIpOnLaunch" : "false",
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "QRM Subnet ", {"Ref" : "QRMEnvironmentType"}," ",{"Ref": "QRMAvailabilityZoneIndex"}]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}   
        ],
        "VpcId" : { "Ref" : "QRMVPC"}
      }
    },

    "QRMSubnetInternalRouteTableAssociation" : 
    {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn" : ["QRMSubNet","QRMInternalRouteTable"], 
      "Properties" : 
      {
        "SubnetId" : { "Ref" : "QRMSubNet" },
        "RouteTableId" : { "Ref" : "QRMInternalRouteTable" }
      }
    },

    "QRMInternetGateway" :
    {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" :
      {
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : "QRM Internet Gateway"},
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "QRM Internet Gateway ", {"Ref" : "QRMEnvironmentType"}," ",{"Ref": "QRMAvailabilityZoneIndex"}]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}    
        ]
      }
    },

    "QRMInternetGatewayAttachment" :
    {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "DependsOn" : ["QRMVPC","QRMInternetGateway"],
      "Properties" : 
      {
        "InternetGatewayId" : { "Ref" : "QRMInternetGateway"},
        "VpcId" : { "Ref" : "QRMVPC"}
      }
    },

    "QRMAddIGWToRoute" : 
    {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : ["QRMInternetGateway", "QRMInternalRouteTable"],
      "Properties" : 
      {
        "RouteTableId" : { "Ref" : "QRMInternalRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "QRMInternetGateway" }
      }
    },

    "QRMSecurityGroup"  :   
    {
      "Type"  : "AWS::EC2::SecurityGroup",
      "DependsOn" : "QRMVPC",
      "Properties" : 
      {
        "VpcId" : { "Ref" : "QRMVPC"},
        "GroupDescription"  : "Security Group for QRM",
        "Tags"  : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "QRM Security Group ", {"Ref" : "QRMEnvironmentType"}," ",{"Ref": "QRMAvailabilityZoneIndex"}]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ],
        "SecurityGroupIngress" : 
        [{
          "IpProtocol" : "tcp",
          "FromPort" : "0000",
          "ToPort" : "0000",
          "CidrIp" : "10.0.0.0"
        },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "0000",
          "ToPort" : "0000",
          "CidrIp" : "10.0.0.0"
        }
        ]
      }
    },

    "ADSecurityGroup"  :  
    {
      "Type"  : "AWS::EC2::SecurityGroup",
      "DependsOn" : "QRMVPC",
      "Properties" :
      {
        "VpcId" : { "Ref" : "QRMVPC"},
        "GroupDescription"  : "Security Group for domain controllers",
        "Tags"  :
        [
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "AD Security Group ", {"Ref" : "QRMEnvironmentType"}," ",{"Ref": "QRMAvailabilityZoneIndex"}]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ],

        "SecurityGroupIngress" :
        [
          {
          "IpProtocol" : "udp",
          "FromPort" : "445",
          "ToPort" : "445",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "udp",
          "FromPort" : "00000",
          "ToPort" : "00000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "udp",
          "FromPort" : "000",
          "ToPort" : "000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "udp",
          "FromPort" : "0000",
          "ToPort" : "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "000",
          "ToPort" : "000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "0000",
          "ToPort" : "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "00000",
          "ToPort" : "00000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "udp",
          "FromPort" : "000",
          "ToPort" : "000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "udp",
          "FromPort" : "00",
          "ToPort" : "00",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "000",
          "ToPort" : "000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "udp",
          "FromPort" : "000",
          "ToPort" : "000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "000",
          "ToPort" : "000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "0000",
          "ToPort" : "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : "0000",
          "ToPort" : "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" : 0000",
          "ToPort" : 0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "udp",
          "FromPort" : "0000",
          "ToPort" :  "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" :  "0000",
          "ToPort" :  "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" :  "0000",
          "ToPort" :  "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" :  "0000",
          "ToPort" :  "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          },
          {
          "IpProtocol" : "tcp",
          "FromPort" :  "0000",
          "ToPort" :  "0000",
          "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
          }
        ],

        "SecurityGroupEgress" :
        [
            {
            "IpProtocol" : "tcp",
            "FromPort" : "0",
            "ToPort" :  "0000",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
            },
            {
            "IpProtocol" : "udp",
            "FromPort" : "0",
            "ToPort" : "0000",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}
            },
            {
            "IpProtocol" : "tcp",
            "FromPort" :  "0000",
            "ToPort" :  "0000",
            "CidrIp" : "174.214.10.195/32"
            }
        ]
      }
    },

    "RootRole": 
    {
      "Type": "AWS::IAM::Role",
      "Properties": 
      {
        "AssumeRolePolicyDocument": 
        {
          "Version" : "2012-10-17",
          "Statement": [ {"Effect": "Allow","Principal": {"Service": [ "ec2.amazonaws.com" ]},"Action": [ "sts:AssumeRole" ]} ]
        },
        "Path": "/",
        "Policies": 
        [ 
          {
            "PolicyName": "root",
            "PolicyDocument": 
            {
              "Version" : "2012-10-17",
              "Statement": [ {"Effect": "Allow","Action": "*","Resource": "*"} ]
            }
          } 
        ]
      }
    },

    "RootInstanceProfile": 
    {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": 
      {
        "Path": "/",
        "Roles": [ {"Ref": "RootRole"} ]
      }
    },

    "DomainControllerWaitCondition": 
    {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "DomainController",
      "Properties": 
      {
        "Handle": 
        {
          "Ref": "DomainControllerWaitHandle"
        },
        "Timeout": "1100"
      }
    },

    "DomainControllerWaitHandle": 
    {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },

    "DomainController": 
    {    
      "Type": "AWS::EC2::Instance",
      "DependsOn": "QRMSubNet",
 
      "Metadata": 
      {
        "AWS::CloudFormation::Init": 
        {
          "configSets": { "config": ["setupfiles","rename", "installADDS","finalize"]},
          "setupfiles": 
          {
            "files": 
            {
              "c:\\cfn\\cfn-hup.conf": 
              {
                "content": 
                {
                  "Fn::Join": ["",["[main]\n","stack=",{"Ref": "AWS::StackName"},"\n","region=",{"Ref": "AWS::Region"},"\n"]]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": 
              {
                "content": 
                {
                  "Fn::Join": 
                  [
                    "",
                  [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.DomainController.Metadata.AWS::CloudFormation::Init\n",
                    "action=cfn-init.exe -v -c config -s ",
                    {
                      "Ref": "AWS::StackId"
                    },
                    " -r DomainController",
                    " --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "\n"
                  ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Set-StaticIP.ps1": 
              {
                "content": 
                {
                  "Fn::Join": 
                  [
                  "",
                  [
                    "$netip = Get-NetIPConfiguration;",
                    "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                    "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                    "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                    "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                    "\n"
                  ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1": 
              {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/activedirectory/latest/scripts/ConvertTo-EnterpriseAdmin.ps1"
              }
            },
            "services": 
            {
              "windows": 
              {
                "cfn-hup": 
                {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": 
                  [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "commands": 
            {
              "a-disable-win-fw": 
              {
              "command": 
              {
                "Fn::Join": ["",["powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False"]]
              },
              "waitAfterCompletion": "0"
              }
            }
          },
          "rename": 
          {
            "commands": 
            {
              "a-set-static-ip": 
              {
              "command": 
                {
                  "Fn::Join": ["",["powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"]]
                },
              "waitAfterCompletion": "15"
              },
              "b-run-powershell-RenameComputer-no-reboot": 
              {
                "command": 
                {
                  "Fn::Join": ["",["powershell.exe Rename-Computer -NewName ", {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"DC"]] }," -force -restart"]]
                },
              "waitAfterCompletion": "forever"
              }
            }
          },
          "installADDS": 
          {
            "commands": 
            {
              "1-install-prereqs": 
              {
                "command": 
                {
                  "Fn::Join": ["",["powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature"]]
                },
                "waitAfterCompletion": "0"
              },
              "2-install-adds": 
              {
                "command": 
                {
                  "Fn::Join": [
                  "",
                    [
                      "powershell.exe -Command Install-ADDSForest -DomainName ",
                      {
                      "Ref": "DomainDNSName"
                      },
                      " -SafeModeAdministratorPassword (ConvertTo-SecureString '",
                      {
                      "Ref": "AdminPassword"
                      },
                      "' -AsPlainText -Force) -DomainMode Win2012R2 -DomainNetbiosName ",
                      {
                      "Ref": "DomainNetBiosName"
                      },
                      " -ForestMode Win2012R2 -Confirm:$false -Force"
                    ]
                  ]
                },
                "waitAfterCompletion": "forever"
              },
              "3-restart-service": 
              {
                "command": 
                {
                 "Fn::Join": ["",["powershell.exe -Command Restart-Service NetLogon -EA 0"]]
                },
                "waitAfterCompletion": "60"
              },          
              "4-restart-ADWS-service": 
              {
                "command": 
                {
                  "Fn::Join": ["",["powershell.exe -Command $s = Get-Service -Name ADWS; while ($s.Status -ne 'Running'){ Start-Service ADWS; Start-Sleep 3 }; Start-Sleep 60\n"]]
                },
              "waitAfterCompletion": "0"
              },
              "5-create-adminuser": 
              {
                "command": 
                {
                  "Fn::Join": 
                  [
                    "",
                    [
                      "powershell.exe -Command $u = New-ADUser -Name ",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      " -UserPrincipalName ",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "@",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " -AccountPassword (ConvertTo-SecureString '",
                      {
                        "Ref": "AdminPassword"
                      },
                      "' -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true -PassThru"
                    ]
                  ]
                },
              "waitAfterCompletion": "0"
              },
              "6-update-adminuser": 
              {
                "command": 
                {
                  "Fn::Join": ["",["powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ",{"Ref": "DomainAdminUser"}]]
                },
              "waitAfterCompletion": "0"
              }
            }
          },
          "finalize": 
          {
            "commands": 
            {
              "a-signal-success": 
              {
                "command": 
                {
                "Fn::Join": ["",["cfn-signal.exe -e 0 ",{"Fn::Base64": {"Ref": "DomainControllerWaitHandle"}},""]]
                }
              }
            }
          }
        }
      },
      "Properties": 
      {
      "BlockDeviceMappings": 
      [
        {
        "DeviceName": "/dev/sda1",
        "Ebs": {"VolumeSize": "40"}
        }
      ],
      "ImageId": { "Fn::FindInMap" : [ "RegionDomainControllerInstanceMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMEnvironmentType"} ]},
      "InstanceType": { "Ref"  :  "DomainInstanceType"},
      "KeyName": {"Ref": "QRMKeyName"},
      "NetworkInterfaces": 
      [
        {
        "AssociatePublicIpAddress": "true",
        "DeleteOnTermination": "true",
        "DeviceIndex": "0",
        "GroupSet": [{"Ref": "QRMSecurityGroup"}, {"Ref" : "ADSecurityGroup"}],
        "PrivateIpAddress":  { "Fn::FindInMap" : [ "DomainNodePrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]},
        "SubnetId": {"Ref": "QRMSubNet"}
        }
      ],
      "Tags": 
      [
        {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMDC"]] }},
            {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
            {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
      ],
      "UserData": {
        "Fn::Base64": {
        "Fn::Join": ["",["<script>\n","cfn-init.exe -v -c config -s ",{"Ref": "AWS::StackId"}," -r DomainController"," --region ",{"Ref": "AWS::Region"},"\n","</script>\n"]]
        }
      }
      }
    },

    "DataNode": 
    {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "QRMSubNet",
      "Metadata"  :
      {  
        "AWS::CloudFormation::Init" : 
        {
          "configSets" : { "BuildIt" : ["ConfigFiles","RunScripts", "JoinDomain"]},
          "ConfigFiles" : 
          {
            "files": 
            {
              "c:\\cfn\\cfn-hup.conf": 
              {
                "content": 
                {
                  "Fn::Join": ["", ["[main]\n","stack=", { "Ref" : "AWS::StackId" }, "\n","region=", { "Ref" : "AWS::Region" }, "\n"]]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": 
              {
                "content": 
                {
                  "Fn::Join": 
                  ["",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.DataNode.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c BuildIt -s ",
                      {"Ref": "AWS::StackId"},
                      " -r DataNode",
                      " --region ",
                      {"Ref": "AWS::Region"},
                      "\n"
                    ]
                  ]
                }
              }      
            },
            "services": 
            {
              "windows": 
              {
                "cfn-hup": 
                {
                  "enabled": "true","ensureRunning": "true", "files": ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "RunScripts" :
          {
            "commands" :
            {

              "01-change-admin-password" : 
              {
                "command" : 
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [  
                      "Powershell.exe  ([adsi]\\\"WinNT://$env:computername/Administrator\\\").SetPassword('",{ "Ref": "AdminPassword"},"')"  
                    ] 
                  ]
                }
              },

              "02-rename-server" :
              {
                "command" :
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [ 
                      "powershell.exe Rename-Computer -NewName ",  {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMDB"]] }    ," -force -restart"
                    ]
                  ]
                },
                "WaitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" :
          {
            "commands" :
            {
              "1-wait-for-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $resource = 'DomainControllerWaitCondition'; $region = '", { "Ref": "AWS::Region" },"';",
                    "$stack = '",{ "Ref": "AWS::StackId"},"';",
                    "$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);",
                    "while (($output -eq $null) -or ($output.ResourceStatus -ne 'CREATE_COMPLETE') -and ($output.ResourceStatus -ne 'UPDATE_COMPLETE')) ",
                    "{Start-Sleep 5;$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);}"
                    ]
                  ]
                }
              },
              "2-Join-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $computer = Get-WmiObject -Class Win32_ComputerSystem;",
                    "if ($computer.domain -eq 'WORKGROUP') {",
                    "$adapter = Get-NetAdapter -Name 'Ethernet*';",
                    "Set-DNSClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses ('",
                    {"Fn::GetAtt": ["DomainController","PrivateIp"]},"');",
                    "  $domain = '",{"Ref": "DomainDNSName"},"';",
                    "  $password =  ConvertTo-SecureString -String '",{"Ref": "AdminPassword"},"' -asPlainText -Force;",
                    "  $Administrator = '",{"Ref": "DomainNetBiosName"},"\\",{"Ref": "DomainAdminUser"},"';",
                    "  $credential = New-Object System.Management.Automation.PSCredential($Administrator,$password);",
                    "  Add-Computer -DomainName $domain -Credential $credential -restart;}"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": 
      {
        "ImageId": { "Fn::FindInMap" : [ "RegionDataInstanceMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMEnvironmentType"} ]},
        "InstanceType" : { "Ref"  :  "DataInstanceType"},
        "KeyName" : { "Ref" : "QRMKeyName"},
        "IamInstanceProfile" : {"Ref" : "RootInstanceProfile"},
        "NetworkInterfaces" : 
        [{
          "SubnetId"  : { "Ref" : "QRMSubNet"},
          "AssociatePublicIpAddress" : "true",
          "DeleteOnTermination"  : "true",
          "Description" :  "DataNode NetworkInterface",
          "DeviceIndex" :  "0",
          "GroupSet" :  [ {"Ref"  : "QRMSecurityGroup"} ],
          "PrivateIpAddress" :    { "Fn::FindInMap" : [ "DataNodePrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}
        }],
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMDB"]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ],
        "UserData"  : 
        {
          "Fn::Base64"  : 
          {
            "Fn::Join"  : [ "",["<script>\n", "cfn-init.exe -v -c BuildIt -s ",{"Ref": "AWS::StackName"}, " -r DataNode"," --region ",{"Ref": "AWS::Region"},"\n","</script>\n"]]
          }  
        }
      }
    },

    "HeadNode": 
    {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "DataNode",
      "Metadata"  :
      {  
        "AWS::CloudFormation::Init" : 
        {
          "configSets" : { "BuildIt" : ["ConfigFiles","RunScripts", "JoinDomain"]},
          "ConfigFiles" : 
          {
            "files": 
            {
              "c:\\cfn\\cfn-hup.conf": 
              {
                "content": 
                {
                  "Fn::Join": ["", ["[main]\n","stack=", { "Ref" : "AWS::StackId" }, "\n","region=", { "Ref" : "AWS::Region" }, "\n"]]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": 
              {
                "content": 
                {
                  "Fn::Join": 
                  ["",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.HeadNode.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c BuildIt -s ",
                      {"Ref": "AWS::StackId"},
                      " -r HeadNode",
                      " --region ",
                      {"Ref": "AWS::Region"},
                      "\n"
                    ]
                  ]
                }
              }     
            },
            "services": 
            {
              "windows": 
              {
                "cfn-hup": 
                {
                  "enabled": "true","ensureRunning": "true", "files": ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "RunScripts" :
          {
            "commands" :
            {

              "01-change-admin-password" : 
              {
                "command" : 
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [  
                      "Powershell.exe  ([adsi]\\\"WinNT://$env:computername/Administrator\\\").SetPassword('",{ "Ref": "AdminPassword"},"')"  
                    ] 
                  ]
                }
              },

              "02-rename-server" :
              {
                "command" :
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [ 
                      "powershell.exe Rename-Computer -NewName ",  {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMHEAD"]] }    ," -force -restart"
                    ]
                  ]
                },
                "WaitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" :
          {
            "commands" :
            {
              "1-wait-for-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $resource = 'DomainControllerWaitCondition'; $region = '", { "Ref": "AWS::Region" },"';",
                    "$stack = '",{ "Ref": "AWS::StackId"},"';",
                    "$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);",
                    "while (($output -eq $null) -or ($output.ResourceStatus -ne 'CREATE_COMPLETE') -and ($output.ResourceStatus -ne 'UPDATE_COMPLETE')) ",
                    "{Start-Sleep 5;$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);}"
                    ]
                  ]
                }
              },
              "2-Join-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $computer = Get-WmiObject -Class Win32_ComputerSystem;",
                    "if ($computer.domain -eq 'WORKGROUP') {",
                    "$adapter = Get-NetAdapter -Name 'Ethernet*';",
                    "Set-DNSClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses ('",
                    {"Fn::GetAtt": ["DomainController","PrivateIp"]},"');",
                    "  $domain = '",{"Ref": "DomainDNSName"},"';",
                    "  $password =  ConvertTo-SecureString -String '",{"Ref": "AdminPassword"},"' -asPlainText -Force;",
                    "  $Administrator = '",{"Ref": "DomainNetBiosName"},"\\",{"Ref": "DomainAdminUser"},"';",
                    "  $credential = New-Object System.Management.Automation.PSCredential($Administrator,$password);",
                    "  Add-Computer -DomainName $domain -Credential $credential -restart;}"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": 
      {
        "ImageId": { "Fn::FindInMap" : [ "RegionHeadInstanceMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMEnvironmentType"} ]},
        "InstanceType" : { "Ref"  :  "HeadInstanceType"},
        "KeyName" : { "Ref" : "QRMKeyName"},
        "IamInstanceProfile" : {"Ref" : "RootInstanceProfile"}, 
        "NetworkInterfaces" : 
        [{
         "SubnetId"  : { "Ref" : "QRMSubNet"},
         "AssociatePublicIpAddress" : "true",
         "DeleteOnTermination"  : "true",
         "Description" :  "HeadNode NetworkInterface",
         "DeviceIndex" :  "0",
         "GroupSet" :  [ {"Ref"  : "QRMSecurityGroup"} ],
         "PrivateIpAddress" : { "Fn::FindInMap" : [ "HeadNodePrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}
         }
        ],
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMHEAD"]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ],
        "UserData"  : 
        {
          "Fn::Base64"  : 
          {
            "Fn::Join"  : [ "",["<script>\n", "cfn-init.exe -v -c BuildIt -s ",{"Ref": "AWS::StackName"}, " -r HeadNode"," --region ",{"Ref": "AWS::Region"},"\n","</script>\n"]]
          }  
        }
      }
    }, 

    "InterfaceNode1": 
    {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "DataNode",
      "Metadata"  :
      {  
        "AWS::CloudFormation::Init" : 
        {
          "configSets" : { "BuildIt" : ["ConfigFiles","RunScripts", "JoinDomain"]},
          "ConfigFiles" : 
          {
            "files": 
            {
              "c:\\cfn\\cfn-hup.conf": 
              {
                "content": 
                {
                  "Fn::Join": ["", ["[main]\n","stack=", { "Ref" : "AWS::StackId" }, "\n","region=", { "Ref" : "AWS::Region" }, "\n"]]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": 
              {
                "content": 
                {
                  "Fn::Join": 
                  ["",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.InterfaceNode1.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c BuildIt -s ",
                      {"Ref": "AWS::StackId"},
                      " -r InterfaceNode1",
                      " --region ",
                      {"Ref": "AWS::Region"},
                      "\n"
                    ]
                  ]
                }
              }     
            },
            "services": 
            {
              "windows": 
              {
                "cfn-hup": 
                {
                  "enabled": "true","ensureRunning": "true", "files": ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "RunScripts" :
          {
            "commands" :
            {

              "01-change-admin-password" : 
              {
                "command" : 
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [  
                      "Powershell.exe  ([adsi]\\\"WinNT://$env:computername/Administrator\\\").SetPassword('",{ "Ref": "AdminPassword"},"')"  
                    ] 
                  ]
                }
              },

              "02-rename-server" :
              {
                "command" :
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [ 
                      "powershell.exe Rename-Computer -NewName ",  {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMIFACE1"]] }    ," -force -restart"
                    ]
                  ]
                },
                "WaitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" :
          {
            "commands" :
            {
              "1-wait-for-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $resource = 'DomainControllerWaitCondition'; $region = '", { "Ref": "AWS::Region" },"';",
                    "$stack = '",{ "Ref": "AWS::StackId"},"';",
                    "$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);",
                    "while (($output -eq $null) -or ($output.ResourceStatus -ne 'CREATE_COMPLETE') -and ($output.ResourceStatus -ne 'UPDATE_COMPLETE')) ",
                    "{Start-Sleep 5;$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);}"
                    ]
                  ]
                }
              },
              "2-Join-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $computer = Get-WmiObject -Class Win32_ComputerSystem;",
                    "if ($computer.domain -eq 'WORKGROUP') {",
                    "$adapter = Get-NetAdapter -Name 'Ethernet*';",
                    "Set-DNSClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses ('",
                    {"Fn::GetAtt": ["DomainController","PrivateIp"]},"');",
                    "  $domain = '",{"Ref": "DomainDNSName"},"';",
                    "  $password =  ConvertTo-SecureString -String '",{"Ref": "AdminPassword"},"' -asPlainText -Force;",
                    "  $Administrator = '",{"Ref": "DomainNetBiosName"},"\\",{"Ref": "DomainAdminUser"},"';",
                    "  $credential = New-Object System.Management.Automation.PSCredential($Administrator,$password);",
                    "  Add-Computer -DomainName $domain -Credential $credential -restart;}"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": 
      {
        "ImageId": { "Fn::FindInMap" : [ "RegionInterfaceInstanceMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMEnvironmentType"} ]},
        "InstanceType" : { "Ref"  :  "InterfaceInstanceType1"},
        "KeyName" : { "Ref" : "QRMKeyName"},
        "IamInstanceProfile" : {"Ref" : "RootInstanceProfile"}, 
        "NetworkInterfaces" : [ 
        {
         "SubnetId"  : { "Ref" : "QRMSubNet"},
         "AssociatePublicIpAddress" : "true",
         "DeleteOnTermination"  : "true",
         "Description" :  "Interface Node NetworkInterface",
         "DeviceIndex" :  "0",
         "GroupSet" :  [ {"Ref"  : "QRMSecurityGroup"} ],
         "PrivateIpAddress" : { "Fn::FindInMap" : [ "InterfaceNode1PrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}
        }
        ],
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMIFACE1"]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ],
        "UserData"  : 
        {
          "Fn::Base64"  : 
          {
            "Fn::Join"  : [ "",["<script>\n", "cfn-init.exe -v -c BuildIt -s ",{"Ref": "AWS::StackName"}, " -r InterfaceNode1"," --region ",{"Ref": "AWS::Region"},"\n","</script>\n"]]
          }  
        }
      }
    },

    "InterfaceNode2": 
    {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "DataNode",
      "Metadata"  :
      {  
        "AWS::CloudFormation::Init" : 
        {
          "configSets" : { "BuildIt" : ["ConfigFiles","RunScripts", "JoinDomain"]},
          "ConfigFiles" : 
          {
            "files": 
            {
              "c:\\cfn\\cfn-hup.conf": 
              {
                "content": 
                {
                  "Fn::Join": ["", ["[main]\n","stack=", { "Ref" : "AWS::StackId" }, "\n","region=", { "Ref" : "AWS::Region" }, "\n"]]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": 
              {
                "content": 
                {
                  "Fn::Join": 
                  ["",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.InterfaceNode2.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c BuildIt -s ",
                      {"Ref": "AWS::StackId"},
                      " -r InterfaceNode2",
                      " --region ",
                      {"Ref": "AWS::Region"},
                      "\n"
                    ]
                  ]
                }
              }     
            },
            "services": 
            {
              "windows": 
              {
                "cfn-hup": 
                {
                  "enabled": "true","ensureRunning": "true", "files": ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "RunScripts" :
          {
            "commands" :
            {

              "01-change-admin-password" : 
              {
                "command" : 
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [  
                      "Powershell.exe  ([adsi]\\\"WinNT://$env:computername/Administrator\\\").SetPassword('",{ "Ref": "AdminPassword"},"')"  
                    ] 
                  ]
                }
              },

              "02-rename-server" :
              {
                "command" :
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [ 
                      "powershell.exe Rename-Computer -NewName ",  {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMIFACE2"]] }    ," -force -restart"
                    ]
                  ]
                },
                "WaitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" :
          {
            "commands" :
            {
              "1-wait-for-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $resource = 'DomainControllerWaitCondition'; $region = '", { "Ref": "AWS::Region" },"';",
                    "$stack = '",{ "Ref": "AWS::StackId"},"';",
                    "$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);",
                    "while (($output -eq $null) -or ($output.ResourceStatus -ne 'CREATE_COMPLETE') -and ($output.ResourceStatus -ne 'UPDATE_COMPLETE')) ",
                    "{Start-Sleep 5;$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);}"
                    ]
                  ]
                }
              },
              "2-Join-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $computer = Get-WmiObject -Class Win32_ComputerSystem;",
                    "if ($computer.domain -eq 'WORKGROUP') {",
                    "$adapter = Get-NetAdapter -Name 'Ethernet*';",
                    "Set-DNSClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses ('",
                    {"Fn::GetAtt": ["DomainController","PrivateIp"]},"');",
                    "  $domain = '",{"Ref": "DomainDNSName"},"';",
                    "  $password =  ConvertTo-SecureString -String '",{"Ref": "AdminPassword"},"' -asPlainText -Force;",
                    "  $Administrator = '",{"Ref": "DomainNetBiosName"},"\\",{"Ref": "DomainAdminUser"},"';",
                    "  $credential = New-Object System.Management.Automation.PSCredential($Administrator,$password);",
                    "  Add-Computer -DomainName $domain -Credential $credential -restart;}"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": 
      {
        "ImageId": { "Fn::FindInMap" : [ "RegionInterfaceInstanceMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMEnvironmentType"} ]},
        "InstanceType" : { "Ref"  :  "InterfaceInstanceType2"},
        "KeyName" : { "Ref" : "QRMKeyName"},
        "IamInstanceProfile" : {"Ref" : "RootInstanceProfile"}, 
        "NetworkInterfaces" : [ 
        {
         "SubnetId"  : { "Ref" : "QRMSubNet"},
         "AssociatePublicIpAddress" : "true",
         "DeleteOnTermination"  : "true",
         "Description" :  "Interface Node NetworkInterface",
         "DeviceIndex" :  "0",
         "GroupSet" :  [ {"Ref"  : "QRMSecurityGroup"} ],
         "PrivateIpAddress" :  { "Fn::FindInMap" : [ "InterfaceNode2PrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}
        }
        ],
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMIFACE2"]] }},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}}
        ],
        "UserData"  : 
        {
          "Fn::Base64"  : 
          {
            "Fn::Join"  : [ "",["<script>\n", "cfn-init.exe -v -c BuildIt -s ",{"Ref": "AWS::StackName"}, " -r InterfaceNode2"," --region ",{"Ref": "AWS::Region"},"\n","</script>\n"]]
          }  
        }
      }
    },

    "QRMComputeServerGroup"  :   
    {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : "QRMComputeLaunchConfig",
      "Properties"  :
      {
        "AvailabilityZones" :  [{ "Fn::FindInMap" : [ "AZMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMAvailabilityZoneIndex"} ]}],
        "LaunchConfigurationName" : { "Ref" : "QRMComputeLaunchConfig"},
        "HealthCheckType" : "EC2",
        "MinSize" : {"Ref" : "ComputeInstanceCount"},
        "MaxSize" : {"Ref" : "ComputeInstanceCount"},
        "Tags" : 
        [ 
          {"Key"  : "Name",  "Value"  : {"Fn::Join"  : [ "",[ "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMCOM"]] }, "PropagateAtLaunch" : "True"},
          {"Key"  : "Environment", "Value"  : {"Ref": "QRMEnvironmentType"}, "PropagateAtLaunch" : "True"},
          {"Key"  : "Environment Index", "Value"  : {"Ref": "QRMAvailabilityZoneIndex"}, "PropagateAtLaunch" : "True"}
        ],
        "VPCZoneIdentifier" : [{ "Ref" : "QRMSubNet"}]
      }
    },

    "QRMComputeLaunchConfig" :
    {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : "DataNode",
      "Metadata"  :
      {  
        "AWS::CloudFormation::Init" : 
        {
          "configSets" : { "BuildIt" : ["ConfigFiles","RunScripts", "JoinDomain"]},
          "ConfigFiles" : 
          {
            "files": 
            {
              "c:\\cfn\\cfn-hup.conf": 
              {
                "content": 
                {
                  "Fn::Join": ["", ["[main]\n","stack=", { "Ref" : "AWS::StackId" }, "\n","region=", { "Ref" : "AWS::Region" }, "\n"]]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": 
              {
                "content": 
                {
                  "Fn::Join": 
                  ["",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.QRMComputeLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c BuildIt -s ",
                      {"Ref": "AWS::StackId"},
                      " -r QRMComputeLaunchConfig",
                      " --region ",
                      {"Ref": "AWS::Region"},
                      "\n"
                    ]
                  ]
                }
              }     
            },
            "services": 
            {
              "windows": 
              {
                "cfn-hup": 
                {
                  "enabled": "true","ensureRunning": "true", "files": ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "RunScripts" :
          {
            "commands" :
            {

              "01-change-admin-password" : 
              {
                "command" : 
                {
                  "Fn::Join" : 
                  [ 
                    "", 
                    [  
                      "Powershell.exe  ([adsi]\\\"WinNT://$env:computername/Administrator\\\").SetPassword('",{ "Ref": "AdminPassword"},"')"  
                    ] 
                  ]
                }
              },

              "02-rename-server" :
              {
                "command" :
                {
                  "Fn::Join" : [ "", [ "powershell.exe $hn = '",    "AW", {"Fn::FindInMap" : [ "EnvironmentTypeName", "PlatformName", {"Ref" : "QRMEnvironmentType"} ]},"W",{"Ref": "QRMAvailabilityZoneIndex"},"QRMCOM"    ,"' + (Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/ami-launch-index);Rename-Computer -NewName $hn -force -restart"]]
                },
                "WaitAfterCompletion" : "forever"
              }
            }
          },        
          "JoinDomain" :
          {
            "commands" :
            {
              "1-wait-for-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $resource = 'DomainControllerWaitCondition'; $region = '", { "Ref": "AWS::Region" },"';",
                    "$stack = '",{ "Ref": "AWS::StackId"},"';",
                    "$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);",
                    "while (($output -eq $null) -or ($output.ResourceStatus -ne 'CREATE_COMPLETE') -and ($output.ResourceStatus -ne 'UPDATE_COMPLETE')) ",
                    "{Start-Sleep 5;$output = (Get-CFNStackResources -StackName $stack -LogicalResourceId $resource -Region $region);}"
                    ]
                  ]
                }
              },
              "2-Join-domain" :
              {
                "command": 
                {
                  "Fn::Join": 
                  ["",
                    [
                    "powershell.exe -Command $computer = Get-WmiObject -Class Win32_ComputerSystem;",
                    "if ($computer.domain -eq 'WORKGROUP') {",
                    "$adapter = Get-NetAdapter -Name 'Ethernet*';",
                    "Set-DNSClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses ('",
                    {"Fn::GetAtt": ["DomainController","PrivateIp"]},"');",
                    "  $domain = '",{"Ref": "DomainDNSName"},"';",
                    "  $password =  ConvertTo-SecureString -String '",{"Ref": "AdminPassword"},"' -asPlainText -Force;",
                    "  $Administrator = '",{"Ref": "DomainNetBiosName"},"\\",{"Ref": "DomainAdminUser"},"';",
                    "  $credential = New-Object System.Management.Automation.PSCredential($Administrator,$password);",
                    "  Add-Computer -DomainName $domain -Credential $credential -restart;}"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "DependsOn" : ["QRMSubNet","QRMSecurityGroup"],

      "Properties": 
      {
        "AssociatePublicIpAddress" : "True",
        "ImageId": { "Fn::FindInMap" : [ "RegionDataInstanceMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMEnvironmentType"}]},
        "InstanceType" : { "Ref"  :  "DataInstanceType"},
        "KeyName" : { "Ref" : "QRMKeyName"},
        "IamInstanceProfile" : {"Ref" : "RootInstanceProfile"}, 
        "SecurityGroups" : [{ "Ref": "QRMSecurityGroup"}],
        "UserData"  : 
        {
          "Fn::Base64"  : 
          {
            "Fn::Join"  : [ "",["<script>\n", "cfn-init.exe -v -c BuildIt -s ",{"Ref": "AWS::StackName"}, " -r QRMComputeLaunchConfig"," --region ",{"Ref": "AWS::Region"},"\n",
                            
                      "</script>\n"]]
          }  
        }
      }
    }
  },

	"Outputs"	:  
  {
    "Region" : { "Description" :  "QRM AWS Region", "Value" :   { "Ref" : "AWS::Region"} },
    "Platform"  : { "Description" : "RM Dev, test, or Prod Platform", "Value" : { "Ref" :"QRMEnvironmentType"} },
    "EnvironmentLetter"  : {"Description" : "QRM environment Letter in Dev, Test, or Prod", "Value" : { "Ref" :"QRMAvailabilityZoneIndex"} },
    "AvailabilityZone"  : {"Description" : "QRM Availability Zone" , "Value" : { "Fn::FindInMap" : [ "AZMap", { "Ref" : "AWS::Region" }, {"Ref" : "QRMAvailabilityZoneIndex"} ]} },
    "Subnet"   :   { "Description" : "QRM Subnet" , "Value" :   { "Fn::FindInMap" : [ "SubnetMap", { "Ref" : "QRMAvailabilityZoneIndex" }, {"Ref" : "QRMEnvironmentType"} ]}},
    "DataNode"  : {"Description" : "QRM Data Node Instance ID", "Value" : { "Ref" :"DataNode"} },
    "DataNodeType"  : {"Description" : "QRM Data Node Instance Type", "Value" : { "Ref" :"DataInstanceType"} },
    "DataNodeIP"  : {"Description" : "QRM Data Node Instance Private IP", "Value" :   { "Fn::FindInMap" : [ "DataNodePrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}},
    "HeadNode"  : {"Description" : "QRM Head Node Instance ID", "Value" : { "Ref" :"HeadNode"} },
    "HeadNodeType"  : {"Description" : "QRM Head Node Instance Type", "Value" : { "Ref" :"HeadInstanceType"} },
    "HeadNodeIP"  : {"Description" : "QRM Head Node Instance Private IP", "Value" :{ "Fn::FindInMap" : [ "HeadNodePrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}},
    "FirstInterfaceNode"  : {"Description" : "QRM First Interface Node Instance ID", "Value" : { "Ref" :"InterfaceNode1"} },
    "FirstInterfaceNodeType"  : {"Description" : "QRM First Interface Node Instance Type", "Value" : { "Ref" :"InterfaceInstanceType1"} },
    "FirstInterfaceNodeIP"  : {"Description" : "QRM First Interface Node Instance IP", "Value" :{ "Fn::FindInMap" : [ "InterfaceNode1PrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}},
    "SecondInterfaceNode"  : {"Description" : "QRM Second Interface Node Instance ID", "Value" : { "Ref" :"InterfaceNode2"} },
    "SecondInterfaceNodeType"  : {"Description" : "QRM Second Interface Node Instance Type", "Value" : { "Ref" :"InterfaceInstanceType2"} },
    "SecondInterfaceNodeIP"  : {"Description" : "QRM Second Interface Node Instance IP", "Value" :  { "Fn::FindInMap" : [ "InterfaceNode2PrivateIPMap", {"Ref" : "QRMEnvironmentType"}, {"Ref" : "QRMAvailabilityZoneIndex"} ]}},
    "ComputeNodeCount"  : {"Description" : "QRM the number of Compute Nodes", "Value" : { "Ref" :"ComputeInstanceCount"} }, 
    "DomainDNSName"  : {"Description" : "QRM Domain DNS name", "Value" : { "Ref" :"DomainDNSName"} },
    "DomainNetBiosName" : {"Description" : "QRM Domain Netbios domain name" , "Value" : { "Ref" :"DomainNetBiosName"}},
    "DomainController" : {"Description" : "QRM Domain Controller Name" , "Value" : { "Ref" :"DomainController"} }
  }
}
